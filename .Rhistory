pca.g
dev.off()
setwd(currentwd)
currentwd <- getwd()
setwd(output_directory)
pdf(file = "PCA_Component_Varinces.pdf", width = 6, height = 5)
plot(components,
pch = 19,
ylab = "Variances",
xlab = "Component",
main = "Principle Component Variances")
lines(y = c(1,1),
x= c(min(components$x),max(components$x)),
lwd = 2,
col = "red")
dev.off()
pdf(file = paste("PCA_Components",pca_choice1,"_",pca_choice2,".pdf",sep = ""), width = 12, height = 8)
pca.g <- ggbiplot(pca, choices = c(pca_choice1, pca_choice2),
obs.scale = 1,
var.scale = 1,
ellipse = TRUE,
circle = TRUE,
groups = levels(facts)[unclass(facts)]) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')+
ggtitle(paste("Principal Components:",pca_choice1,"and",pca_choice2))
print(pca.g)
dev.off()
setwd(currentwd)
source('~/Dropbox/SoDA_502/Hierarchy_In_Networks/Scripts/generate_pca_plots.R')
generate_pca_plots(global_measures,
save_to_file = TRUE,
pca_choice1 = 2,
pca_choice2 = 3)
generate_pca_plots(global_measures,
save_to_file = TRUE,
pca_choice1 = 1,
pca_choice2 = 3)
g <- igraph::sample_pa(1000)
plot(g)
g <- get.adjacency(igraph::sample_pa(100))
g <- as.matrix(get.adjacency(igraph::sample_pa(100)))
g <- as.matrix(get.adjacency(igraph::sample_pa(100)))
g <- as.matrix(get.adjacency(igraph::sample_pa(100)))
plot(g)
plot(igraph::sample_pa(100))
library(igraph)
?sample_pa
barabasi_albert_networks <- vector(mode = "list",
length = length(nodes))
nodes = seq(10,100,by = 10)
samples = 1000
barabasi_albert_networks <- vector(mode = "list",
length = length(nodes))
nodes = seq(25,100,by = 25)
pref_attachment_params <- c(0.5,1,1.5,2,2.5)
barabasi_albert_networks <- vector(mode = "list",
length = num_network_sizes)
pref_attachment_params <- c(0.5,1,1.5,2,2.5)
num_params <- length(pref_attachment_params)
num_network_sizes <- length(nodes)
#generate networks from barabasi-albert model
barabasi_albert_networks <- vector(mode = "list",
length = num_network_sizes)
pref_attachment_params <- c(0.5,1,1.5,2,2.5)
num_params <- length(pref_attachment_params)
source('~/Dropbox/SoDA_502/Hierarchy_In_Networks/Scripts/generate_networks.R')
source('./Scripts/generate_networks.R')
ba_networks <- generate_networks(nodes = seq(25,100,by = 25),
samples = 100,
seed = 12345)
ba_networks <- generate_networks(nodes = seq(25,100,by = 25),
samples = 500,
seed = 12345)
ba_measures <- generate_hierarchy_dataset(ba_networks)
warnings()
ba_global_measures <- ba_measures$global_measure_dataframe
View(ba_global_measures)
source('~/Dropbox/SoDA_502/Hierarchy_In_Networks/Scripts/generate_networks.R')
ba_networks <- generate_networks(nodes = seq(25,100,by = 25),
samples = 500,
seed = 12345)
ba_measures <- generate_hierarchy_dataset(ba_networks)
ba_global_measures <- ba_measures$global_measure_dataframe
if(length(which(is.na(global_measures$D_root))) == 0 &
length(unique(global_measures$eigenvector_centralization)) == 1)){
# pca with all measures except D_root which was mostly NA.
pca <- with(global_measures, prcomp(~degree_centralization +
closeness_centralization +
betweenness_centralization +
eigenvector_centralization +
landau +
kendall +
GRC,
scale = TRUE,
center = TRUE))
}
source('~/Dropbox/SoDA_502/Hierarchy_In_Networks/Scripts/generate_pca_plots.R')
generate_pca_plots(ba_global_measures,
save_to_file = FALSE,
pca_choice1 = 1,
pca_choice2 = 2)
ba_global_measures <- data.frame(ba_measures$global_measure_dataframe,
stringsAsFactors = F)
ba_measures <- generate_hierarchy_dataset(ba_networks)
string <- "BA_n-100_p-0.5_s-123"
paste0(stringr::str_split(string,"_")[[1]][c(1,3,4)],collapse = " ")
paste0(stringr::str_split(string,"_")[[1]][c(1,3)],collapse = " ")
collapse_over_parameter <- function(dataframe){
remove_n <- function(string){
paste0(stringr::str_split(string,"_")[[1]][c(1,3)],collapse = " ")
}
dataframe$network_type <- sapply(dataframe$network_type, remove_n)
retrun(dataframe)
}
generate_pca_plots(collapse_over_parameter(ba_global_measures),
save_to_file = FALSE,
pca_choice1 = 1,
pca_choice2 = 2)
collapse_over_parameter <- function(dataframe){
remove_n <- function(string){
paste0(stringr::str_split(string,"_")[[1]][c(1,3)],collapse = " ")
}
dataframe$network_type <- sapply(dataframe$network_type, remove_n)
return(dataframe)
}
generate_pca_plots(collapse_over_parameter(ba_global_measures),
save_to_file = FALSE,
pca_choice1 = 1,
pca_choice2 = 2)
source('~/Dropbox/SoDA_502/Hierarchy_In_Networks/Scripts/generate_pca_plots.R')
generate_pca_plots(collapse_over_parameter(ba_global_measures),
name_stem = "BA_Param"
save_to_file = FALSE,
pca_choice1 = 1,
pca_choice2 = 2)
generate_pca_plots(collapse_over_parameter(ba_global_measures),
name_stem = "BA_Param",
save_to_file = FALSE,
pca_choice1 = 1,
pca_choice2 = 2)
collapse_over_size <- function(dataframe){
remove_n <- function(string){
paste0(stringr::str_split(string,"_")[[1]][c(1,3)],collapse = " ")
}
dataframe$network_type <- sapply(dataframe$network_type, remove_n)
return(dataframe)
}
collapse_over_parameter <- function(dataframe){
remove_n <- function(string){
paste0(stringr::str_split(string,"_")[[1]][c(1,2)],collapse = " ")
}
dataframe$network_type <- sapply(dataframe$network_type, remove_n)
return(dataframe)
}
source('~/Dropbox/SoDA_502/Hierarchy_In_Networks/Scripts/generate_barabasi_albert_networks.R')
generate_pca_plots(collapse_over_parameter(ba_global_measures),
name_stem = "BA_Param",
save_to_file = TRUE,
pca_choice1 = 1,
pca_choice2 = 2)
generate_pca_plots(collapse_over_size(ba_global_measures),
name_stem = "BA_Param",
save_to_file = TRUE,
pca_choice1 = 1,
pca_choice2 = 2)
generate_pca_plots(collapse_over_parameter(ba_global_measures),
name_stem = "BA_Size",
save_to_file = TRUE,
pca_choice1 = 1,
pca_choice2 = 2)
average_over_type <- function(dataframe){
ret <- NULL
un <- unique(dataframe$network_type)
for(i in 1:length(un)){
ret <- rbind(ret, colMeans(dataframe[which(dataframe$network_type == un[i]),]))
}
return(ret)
}
ba_param_averages <- average_over_type(collapse_over_size(ba_global_measures))
dataframe <- collapse_over_size(ba_global_measures)
un <- unique(dataframe$network_type)
numeric_cols <- which(type(dataframe[1,] == "numeric"))
numeric_cols <- which(class(dataframe[1,]) == "numeric"))
class(dataframe[1,])
numeric_cols <- NULL
for(i in 1:ncol(dataframe)){
numeric_cols <- c(numeric_cols,class(dataframe[,i]))
}
numeric_cols <- which(numeric_cols == "numeric")
numeric_cols <- NULL
for(i in 1:ncol(dataframe)){
numeric_cols <- c(numeric_cols,class(dataframe[,i]))
}
character_cols <- which(numeric_cols != "numeric")
numeric_cols <- which(numeric_cols == "numeric")
?colMeans
average_over_type <- function(dataframe){
ret <- NULL
un <- unique(dataframe$network_type)
numeric_cols <- NULL
for(i in 1:ncol(dataframe)){
numeric_cols <- c(numeric_cols,class(dataframe[,i]))
}
character_cols <- which(numeric_cols != "numeric")
numeric_cols <- which(numeric_cols == "numeric")
for(i in 1:length(un)){
ret <- rbind(ret, c(colMeans(dataframe[which(dataframe$network_type == un[i]),numeric_cols], na.rm= TRUE),dataframe[which(dataframe$network_type == un[i])[1],character_cols] ))
}
return(ret)
}
ba_param_averages <- average_over_type(collapse_over_size(ba_global_measures))
View(ba_param_averages)
average_over_type <- function(dataframe){
ret <- NULL
un <- unique(dataframe$network_type)
numeric_cols <- NULL
for(i in 1:ncol(dataframe)){
numeric_cols <- c(numeric_cols,class(dataframe[,i]))
}
character_cols <- which(numeric_cols != "numeric")[1]
numeric_cols <- which(numeric_cols == "numeric")
for(i in 1:length(un)){
ret <- rbind(ret, c(colMeans(dataframe[which(dataframe$network_type == un[i]),numeric_cols], na.rm= TRUE),dataframe[which(dataframe$network_type == un[i])[1],character_cols] ))
}
return(ret)
}
ba_param_averages <- average_over_type(collapse_over_size(ba_global_measures))
View(ba_param_averages)
average_over_type <- function(dataframe){
ret <- NULL
un <- unique(dataframe$network_type)
numeric_cols <- NULL
for(i in 1:ncol(dataframe)){
numeric_cols <- c(numeric_cols,class(dataframe[,i]))
}
character_cols <- which(numeric_cols != "numeric")[1]
numeric_cols <- which(numeric_cols == "numeric")
for(i in 1:length(un)){
ret <- data.frame(rbind(ret, c(colMeans(dataframe[which(dataframe$network_type == un[i]),numeric_cols], na.rm= TRUE),dataframe[which(dataframe$network_type == un[i])[1],character_cols] )), stringsAsFactors = F)
}
return(ret)
}
ba_param_averages <- average_over_type(collapse_over_size(ba_global_measures))
View(ba_param_averages)
average_over_type <- function(dataframe){
ret <- NULL
un <- unique(dataframe$network_type)
numeric_cols <- NULL
for(i in 1:ncol(dataframe)){
numeric_cols <- c(numeric_cols,class(dataframe[,i]))
}
character_cols <- which(numeric_cols != "numeric")[1]
numeric_cols <- which(numeric_cols == "numeric")
for(i in 1:length(un)){
ret <- data.frame(rbind(ret, cbind(colMeans(dataframe[which(dataframe$network_type == un[i]),numeric_cols], na.rm= TRUE),dataframe[which(dataframe$network_type == un[i])[1],character_cols] )), stringsAsFactors = F)
}
return(ret)
}
ba_param_averages <- average_over_type(collapse_over_size(ba_global_measures))
average_over_type <- function(dataframe){
ret <- NULL
un <- unique(dataframe$network_type)
numeric_cols <- NULL
for(i in 1:ncol(dataframe)){
numeric_cols <- c(numeric_cols,class(dataframe[,i]))
}
character_cols <- which(numeric_cols != "numeric")[1]
numeric_cols <- which(numeric_cols == "numeric")
for(i in 1:length(un)){
ret <- data.frame(rbind(ret, data.frame(colMeans(dataframe[which(dataframe$network_type == un[i]),numeric_cols], na.rm= TRUE),dataframe[which(dataframe$network_type == un[i])[1],character_cols], stringsAsFactors = F )), stringsAsFactors = F)
}
return(ret)
}
ba_param_averages <- average_over_type(collapse_over_size(ba_global_measures))
View(ba_param_averages)
average_over_type <- function(dataframe){
ret <- NULL
un <- unique(dataframe$network_type)
numeric_cols <- NULL
for(i in 1:ncol(dataframe)){
numeric_cols <- c(numeric_cols,class(dataframe[,i]))
}
character_cols <- which(numeric_cols != "numeric")[1]
numeric_cols <- which(numeric_cols == "numeric")
for(i in 1:length(un)){
ret <- data.frame(rbind(ret, c(colMeans(dataframe[which(dataframe$network_type == un[i]),numeric_cols], na.rm= TRUE),dataframe[which(dataframe$network_type == un[i])[1],character_cols])), stringsAsFactors = F)
ret[,numeric_cols] <- as.numeric(ret[,numeric_cols])
}
return(ret)
}
ba_param_averages <- average_over_type(collapse_over_size(ba_global_measures))
average_over_type <- function(dataframe){
ret <- NULL
un <- unique(dataframe$network_type)
numeric_cols <- NULL
for(i in 1:ncol(dataframe)){
numeric_cols <- c(numeric_cols,class(dataframe[,i]))
}
character_cols <- which(numeric_cols != "numeric")[1]
numeric_cols <- which(numeric_cols == "numeric")
for(i in 1:length(un)){
ret <- data.frame(rbind(ret, c(colMeans(dataframe[which(dataframe$network_type == un[i]),numeric_cols], na.rm= TRUE),dataframe[which(dataframe$network_type == un[i])[1],character_cols])), stringsAsFactors = F)
}
#now make sure columns are numeric
for(j in 1:length(numeric_cols)){
dataframe[,numeric_cols[j]] <- as.numeric(dataframe[,numeric_cols[j]])
}
return(ret)
}
ba_param_averages <- average_over_type(collapse_over_size(ba_global_measures))
View(ba_param_averages)
ret <- NULL
un <- unique(dataframe$network_type)
numeric_cols <- NULL
for(i in 1:ncol(dataframe)){
numeric_cols <- c(numeric_cols,class(dataframe[,i]))
}
character_cols <- which(numeric_cols != "numeric")[1]
numeric_cols <- which(numeric_cols == "numeric")
for(i in 1:length(un)){
ret <- data.frame(rbind(ret, c(colMeans(dataframe[which(dataframe$network_type == un[i]),numeric_cols], na.rm= TRUE),dataframe[which(dataframe$network_type == un[i])[1],character_cols])), stringsAsFactors = F)
}
for(j in 1:length(numeric_cols)){
ret[,numeric_cols[j]] <- as.numeric(ret[,numeric_cols[j]])
}
average_over_type <- function(dataframe){
ret <- NULL
un <- unique(dataframe$network_type)
numeric_cols <- NULL
for(i in 1:ncol(dataframe)){
numeric_cols <- c(numeric_cols,class(dataframe[,i]))
}
character_cols <- which(numeric_cols != "numeric")[1]
numeric_cols <- which(numeric_cols == "numeric")
for(i in 1:length(un)){
ret <- data.frame(rbind(ret, c(colMeans(dataframe[which(dataframe$network_type == un[i]),numeric_cols], na.rm= TRUE),dataframe[which(dataframe$network_type == un[i])[1],character_cols])), stringsAsFactors = F)
}
#now make sure columns are numeric
for(j in 1:length(numeric_cols)){
ret[,numeric_cols[j]] <- as.numeric(ret[,numeric_cols[j]])
}
return(ret)
}
ba_param_averages <- average_over_type(collapse_over_size(ba_global_measures))
ba_size_averages <- average_over_type(collapse_over_parameter(ba_global_measures))
multi_plot(data = ba_param_averages,
pdf_name = "Global_Measures",
output_pdf = F,
c(1:8))
average_over_type <- function(dataframe){
ret <- NULL
un <- unique(dataframe$network_type)
numeric_cols <- NULL
for(i in 1:ncol(dataframe)){
numeric_cols <- c(numeric_cols,class(dataframe[,i]))
}
character_cols <- which(numeric_cols != "numeric")[1]
numeric_cols <- which(numeric_cols == "numeric")
for(i in 1:length(un)){
ret <- data.frame(rbind(ret, c(colMeans(dataframe[which(dataframe$network_type == un[i]),numeric_cols], na.rm= TRUE),dataframe[which(dataframe$network_type == un[i])[1],character_cols])), stringsAsFactors = F)
}
#now make sure columns are numeric
for(j in 1:length(numeric_cols)){
ret[,numeric_cols[j]] <- as.numeric(ret[,numeric_cols[j]])
}
row.names(ret) <- dataframe$network_type
return(ret)
}
ba_param_averages <- average_over_type(collapse_over_size(ba_global_measures))
ba_size_averages <- average_over_type(collapse_over_parameter(ba_global_measures))
multi_plot(data = ba_param_averages,
pdf_name = "Global_Measures",
output_pdf = F,
c(1:8))
average_over_type <- function(dataframe){
ret <- NULL
un <- unique(dataframe$network_type)
numeric_cols <- NULL
for(i in 1:ncol(dataframe)){
numeric_cols <- c(numeric_cols,class(dataframe[,i]))
}
character_cols <- which(numeric_cols != "numeric")[1]
numeric_cols <- which(numeric_cols == "numeric")
for(i in 1:length(un)){
ret <- data.frame(rbind(ret, c(colMeans(dataframe[which(dataframe$network_type == un[i]),numeric_cols], na.rm= TRUE),dataframe[which(dataframe$network_type == un[i])[1],character_cols])), stringsAsFactors = F)
row.names(ret)[j] <- paste0(stringr::str_split(ret$network_type[j]," "),
collapse = "_")
}
#now make sure columns are numeric
for(j in 1:length(numeric_cols)){
ret[,numeric_cols[j]] <- as.numeric(ret[,numeric_cols[j]])
}
return(ret)
}
ba_param_averages <- average_over_type(collapse_over_size(ba_global_measures))
ba_size_averages <- average_over_type(collapse_over_parameter(ba_global_measures))
multi_plot(data = ba_param_averages,
pdf_name = "Global_Measures",
output_pdf = F,
c(1:8))
average_over_type <- function(dataframe){
ret <- NULL
un <- unique(dataframe$network_type)
numeric_cols <- NULL
for(i in 1:ncol(dataframe)){
numeric_cols <- c(numeric_cols,class(dataframe[,i]))
}
character_cols <- which(numeric_cols != "numeric")[1]
numeric_cols <- which(numeric_cols == "numeric")
for(i in 1:length(un)){
ret <- data.frame(rbind(ret, c(colMeans(dataframe[which(dataframe$network_type == un[i]),numeric_cols], na.rm= TRUE),dataframe[which(dataframe$network_type == un[i])[1],character_cols])), stringsAsFactors = F)
row.names(ret)[j] <- paste0(stringr::str_split(ret$network_type[j]," ")[[1]],
collapse = "_")
}
#now make sure columns are numeric
for(j in 1:length(numeric_cols)){
ret[,numeric_cols[j]] <- as.numeric(ret[,numeric_cols[j]])
}
return(ret)
}
ba_param_averages <- average_over_type(collapse_over_size(ba_global_measures))
ba_size_averages <- average_over_type(collapse_over_parameter(ba_global_measures))
multi_plot(data = ba_param_averages,
pdf_name = "Global_Measures",
output_pdf = F,
c(1:8))
collapser <- function(str){
paste0(stringr::str_split(str," ")[[1]],
collapse = "_")
}
average_over_type <- function(dataframe){
ret <- NULL
un <- unique(dataframe$network_type)
numeric_cols <- NULL
for(i in 1:ncol(dataframe)){
numeric_cols <- c(numeric_cols,class(dataframe[,i]))
}
character_cols <- which(numeric_cols != "numeric")[1]
numeric_cols <- which(numeric_cols == "numeric")
for(i in 1:length(un)){
ret <- data.frame(rbind(ret, c(colMeans(dataframe[which(dataframe$network_type == un[i]),numeric_cols], na.rm= TRUE),dataframe[which(dataframe$network_type == un[i])[1],character_cols])), stringsAsFactors = F)
}
#now make sure columns are numeric
for(j in 1:length(numeric_cols)){
ret[,numeric_cols[j]] <- as.numeric(ret[,numeric_cols[j]])
}
collapser <- function(str){
paste0(stringr::str_split(str," ")[[1]],
collapse = "_")
}
row.names(ret) <- sapply(ret$network_type, collapser)
return(ret)
}
ba_param_averages <- average_over_type(collapse_over_size(ba_global_measures))
ba_size_averages <- average_over_type(collapse_over_parameter(ba_global_measures))
multi_plot(data = ba_param_averages,
pdf_name = "Global_Measures",
output_pdf = F,
c(1:8))
collapser <- function(str){
paste0(stringr::str_split(str," ")[[1]],
collapse = "_")
}
sapply(ret$network_type, collapser)
str<- "BA p-1"
paste0(stringr::str_split(str," ")[[1]],
collapse = "_")
ret$network_type
colnames(ret)[character_cols] <- "network_type"
collapser <- function(str){
paste0(stringr::str_split(str," ")[[1]],
collapse = "_")
}
row.names(ret) <- sapply(ret$network_type, collapser)
average_over_type <- function(dataframe){
ret <- NULL
un <- unique(dataframe$network_type)
numeric_cols <- NULL
for(i in 1:ncol(dataframe)){
numeric_cols <- c(numeric_cols,class(dataframe[,i]))
}
character_cols <- which(numeric_cols != "numeric")[1]
numeric_cols <- which(numeric_cols == "numeric")
for(i in 1:length(un)){
ret <- data.frame(rbind(ret, c(colMeans(dataframe[which(dataframe$network_type == un[i]),numeric_cols], na.rm= TRUE),dataframe[which(dataframe$network_type == un[i])[1],character_cols])), stringsAsFactors = F)
}
#now make sure columns are numeric
for(j in 1:length(numeric_cols)){
ret[,numeric_cols[j]] <- as.numeric(ret[,numeric_cols[j]])
}
colnames(ret)[character_cols] <- "network_type"
collapser <- function(str){
paste0(stringr::str_split(str," ")[[1]],
collapse = "_")
}
row.names(ret) <- sapply(ret$network_type, collapser)
return(ret)
}
ba_param_averages <- average_over_type(collapse_over_size(ba_global_measures))
ba_size_averages <- average_over_type(collapse_over_parameter(ba_global_measures))
multi_plot(data = ba_param_averages,
pdf_name = "Global_Measures",
output_pdf = F,
c(1:8))
require(SpeedReader)
multi_plot(data = ba_param_averages,
pdf_name = "Global_Measures",
output_pdf = F,
c(1:8),
connect_with_lines = T)
devtools::install_github("matthewjdenny/SpeedReader")
