output_pdf = T)
?points
source('~/Dropbox/SoDA_502/Hierarchy_In_Networks/Scripts/multi_plot.R')
source('~/Dropbox/SoDA_502/Hierarchy_In_Networks/Scripts/multi_plot.R')
multi_plot(data = measure_scores,
pdf_name = "Measure_Scores",
output_pdf = T)
source('~/Dropbox/SoDA_502/Hierarchy_In_Networks/Scripts/multi_plot.R')
multi_plot(data = measure_scores,
pdf_name = "Measure_Scores",
output_pdf = T)
source('~/Dropbox/SoDA_502/Hierarchy_In_Networks/Scripts/multi_plot.R')
multi_plot(data = measure_scores,
pdf_name = "Measure_Scores",
output_pdf = T)
multi_plot(data = global_measures,
pdf_name = "Global_Measures",
output_pdf = T,
2:4)
source('~/Dropbox/SoDA_502/Hierarchy_In_Networks/Scripts/multi_plot.R')
multi_plot(data = global_measures,
pdf_name = "Global_Measures",
output_pdf = T,
2:4)
source('~/Dropbox/SoDA_502/Hierarchy_In_Networks/Scripts/multi_plot.R')
multi_plot(data = global_measures,
pdf_name = "Global_Measures",
output_pdf = T,
2:4)
multi_plot(data = measure_scores,
pdf_name = "Measure_Scores",
output_pdf = T)
colMeans(measure_scores[1:17,])
colMeans(measure_scores[1:29,])
#preliminaries
rm(list = ls())
#load in functions
source("./Scripts/calculate_analytical_hierarchy_measures.R")
source("./Scripts/score_leadership_rank.R")
source("./Scripts/multi_plot.R")
#load data
load("./Data/Network_Data.Rdata")
# calculate measures for all networks
Measures <- vector(length = length(Network_Data), mode = "list")
for(i in 1:length(Network_Data)){
print(i)
Measures[[i]] <- calculate_analytical_hierarhy_measures(
sociomatrix = Network_Data[[i]]$sociomatrix,
mode = Network_Data[[i]]$mode
)
}
#populate dataframe with global measures
global_measures <- data.frame(matrix(0,
nrow = length(Measures),
ncol = length(Measures[[1]]$global)))
for(i in 1:length(Measures)){
global_measures[i,] <- unlist(Measures[[i]]$global)
}
colnames(global_measures) <- names((Measures[[1]]$global))
rownames(global_measures) <- names(Network_Data)
save(global_measures, file = "./Data/global_hierarchy_measures.Rdata")
multi_plot(data = global_measures,
pdf_name = "Global_Measures",
output_pdf = F,
2:4)
source('~/Dropbox/SoDA_502/Hierarchy_In_Networks/Scripts/multi_plot.R')
multi_plot(data = global_measures,
pdf_name = "Global_Measures",
output_pdf = F,
2:4)
source('~/Dropbox/SoDA_502/Hierarchy_In_Networks/Scripts/multi_plot.R')
source('~/Dropbox/SoDA_502/Hierarchy_In_Networks/Scripts/multi_plot.R')
multi_plot(data = global_measures,
pdf_name = "Global_Measures",
output_pdf = F,
2:4)
plot(1:4,1:4,ylim=c(0,4))
abline(v=2)
segments(x0=2,y0=0,x1=2,y1=2,col="red")
plot(1:4,1:4,ylim=c(0,4))
segments(x0=2,y0=0,x1=2,y1=2,col="red")
source('~/Dropbox/SoDA_502/Hierarchy_In_Networks/Scripts/multi_plot.R')
multi_plot(data = global_measures,
pdf_name = "Global_Measures",
output_pdf = F,
2:4)
source('~/Dropbox/SoDA_502/Hierarchy_In_Networks/Scripts/multi_plot.R')
multi_plot(data = global_measures,
pdf_name = "Global_Measures",
output_pdf = F,
2:4)
#calculate measures for all networks
#works on Matt's Computer
#preliminaries
rm(list = ls())
#load in functions
source("./Scripts/calculate_analytical_hierarchy_measures.R")
source("./Scripts/score_leadership_rank.R")
source("./Scripts/multi_plot.R")
#load data
load("./Data/Network_Data.Rdata")
# calculate measures for all networks
Measures <- vector(length = length(Network_Data), mode = "list")
for(i in 1:length(Network_Data)){
print(i)
Measures[[i]] <- calculate_analytical_hierarhy_measures(
sociomatrix = Network_Data[[i]]$sociomatrix,
mode = Network_Data[[i]]$mode
)
}
#populate dataframe with global measures
global_measures <- data.frame(matrix(0,
nrow = length(Measures),
ncol = length(Measures[[1]]$global)))
for(i in 1:length(Measures)){
global_measures[i,] <- unlist(Measures[[i]]$global)
}
colnames(global_measures) <- names((Measures[[1]]$global))
rownames(global_measures) <- names(Network_Data)
save(global_measures, file = "./Data/global_hierarchy_measures.Rdata")
multi_plot(data = global_measures,
pdf_name = "Global_Measures",
output_pdf = F,
2:4)
#now score against
measure_scores <- score_leadership_rank(Network_Data = Network_Data,
Measures = Measures)
multi_plot(data = measure_scores,
pdf_name = "Measure_Scores",
output_pdf = T)
colMeans(measure_scores[1:17,])
colMeans(measure_scores[1:29,])
source("./Scripts/calculate_analytical_hierarchy_measures.R")
source("./Scripts/score_leadership_rank.R")
source("./Scripts/multi_plot.R")
#load data
load("./Data/Network_Data.Rdata")
load("./Data/Influence_Network_Data_97_108.Rdata")
load("./Data/Network_Data.Rdata")
Networks_all=append(Network_Data,Influence_Network_data_97_108,Manager_Email_Networks)
load("./Data/Manager_Email_Networks.Rdata")
Networks_all=append(Network_Data,Influence_Network_data_97_108,Manager_Email_Networks)
Networks_all=append(Network_Data,Influence_Network_Data_97_108,Manager_Email_Networks)
socio_all=list()
for(i in 1:d1){socio_all[[i]]=Network_Data$sociomatrix}
d1=length(Network_Data);d2=length(Influence_Network_Data_97_108);d3=length(Manager_Email_Networks)
D=d1+d2+d3
socio_all=list()
for(i in 1:d1){socio_all[[i]]=Network_Data$sociomatrix}
for(i in d1:d1+d2){socio_all[[i]]=Influence_Network_Data_97_108$network}
for(i in d1+d2:D){socio_all[[i]]=Manager_Email_Networks$sociomatrix}
length(socio_All)
length(socio_all)
1:d1
d1:d1+d2
d1
socio_all=list()
for(i in 1:d1){socio_all[[i]]=Network_Data$sociomatrix}
length(socio_all)
d1=length(Network_Data);d2=length(Influence_Network_Data_97_108);d3=length(Manager_Email_Networks)
D=d1+d2+d3
socio_all=list()
for(i in 1:d1){socio_all[[i]]=Network_Data[[i]]$sociomatrix}
for(i in d1:(d1+d2)){socio_all[[i]]=Influence_Network_Data_97_108[[i]]$network}
length(socio_all)
for(i in d1+1:(d1+d2)){socio_all[[i]]=Influence_Network_Data_97_108[[i]]$network}
(d1+1):(d1+d2+1)
socio_all=list()
for(i in 1:d1){socio_all[[i]]=Network_Data[[i]]$sociomatrix}
for(i in (d1+1):(d1+d2)){socio_all[[i]]=Influence_Network_Data_97_108[[i]]$network}
help(list)
help(as.list)
length(socio_all)
socio_all[[30]]=50
d1=length(Network_Data);d2=length(Influence_Network_Data_97_108);d3=length(Manager_Email_Networks)
D=d1+d2+d3
socio_all=list()
for(i in 1:d1){socio_all[[i]]=Network_Data[[i]]$sociomatrix}
for(i in (d1+1):(d1+d2)){socio_all[[i]]=Influence_Network_Data_97_108[[i-(d1+1)]]$network}
d1=length(Network_Data);d2=length(Influence_Network_Data_97_108);d3=length(Manager_Email_Networks)
D=d1+d2+d3
socio_all=list()
for(i in 1:d1){socio_all[[i]]=Network_Data[[i]]$sociomatrix}
for(i in (d1+1):(d1+d2)){socio_all[[i]]=Influence_Network_Data_97_108[[i-(d1)]]$network}
d1=length(Network_Data);d2=length(Influence_Network_Data_97_108);d3=length(Manager_Email_Networks)
D=d1+d2+d3
socio_all=list()
for(i in 1:d1){socio_all[[i]]=Network_Data[[i]]$sociomatrix}
for(i in (d1+1):(d1+d2)){socio_all[[i]]=Influence_Network_Data_97_108[[i-d1]]$network}
for(i in (d1+d2+1):D){socio_all[[i]]=Manager_Email_Networks[[i-(d1+d2)]]$sociomatrix}
save_G=matrix(nrow=D,ncol=10)
save_LR=list()
save_L=list()
i=1
save_G[i,1]=landau(socio_all[[i]])$global
save_G[i,2]=kendall(socio_all[[i]])$global
save_G[i,3]=m_degree(socio_all[[i]])$global
save_G[i,4]=m_close(socio_all[[i]])$global
save_G[i,5]=GRC(socio_all[[i]])$global
save_G[i,6]=D_root(socio_all[[i]])$global
save_G[i,7:10]=as.numeric(calculate_analytical_hierarhy_measures(
socio_all[[i]])$global)
save_G=matrix(nrow=D,ncol=10)
save_LR=list()
save_L=list()
for (i in 1:D){
save_G[i,1]=landau(socio_all[[i]])$global
save_G[i,2]=kendall(socio_all[[i]])$global
save_G[i,3]=m_degree(socio_all[[i]])$global
save_G[i,4]=m_close(socio_all[[i]])$global
save_G[i,5]=GRC(socio_all[[i]])$global
save_G[i,6]=D_root(socio_all[[i]])$global
save_G[i,7:10]=as.numeric(calculate_analytical_hierarhy_measures(
socio_all[[i]])$global)
}
for (i in 1:D){
s=matrix(nrow=dim(socio_all[[i]])[1],ncol=10)
s[,1]=landau(socio_all[[i]])$local
s[,2]=kendall(socio_all[[i]])$local
s[,3]=rank(as.numeric(m_degree(socio_all[[i]])$local))
s[,4]=rank(as.numeric(m_close(socio_all[[i]])$local))
s[,5]=rank(as.numeric(GRC(socio_all[[i]])$local))
s[,6]=rank(as.numeric(D_root(socio_all[[i]])$local))
s[,7]=as.numeric(calculate_analytical_hierarhy_measures(
socio_all[[i]])$local$degree_centrality$rank)
s[,8]=as.numeric(calculate_analytical_hierarhy_measures(
socio_all[[i]])$local$closeness_centrality$rank)
s[,9]=as.numeric(calculate_analytical_hierarhy_measures(
socio_all[[i]])$local$betweenness_centrality$rank)
s[,10]=as.numeric(calculate_analytical_hierarhy_measures(
socio_all[[i]])$local$eigenvector_centrality$rank)
save_LR[[i]]=s
}
for (i in 1:D){
s=matrix(nrow=dim(socio_all[[i]]$sociomatrix)[1],ncol=10)
s[,1]=landau(socio_all[[i]])$local
s[,2]=kendall(socio_all[[i]])$local
s[,3]=as.numeric(m_degree(socio_all[[i]])$local)
s[,4]=as.numeric(m_close(socio_all[[i]])$local)
s[,5]=as.numeric(GRC(socio_all[[i]])$local)
s[,6]=as.numeric(D_root(socio_all[[i]])$local)
s[,7]=as.numeric(calculate_analytical_hierarhy_measures(
socio_all[[i]])$local$degree_centrality$score)
s[,8]=as.numeric(calculate_analytical_hierarhy_measures(
socio_all[[i]])$local$closeness_centrality$score)
s[,9]=as.numeric(calculate_analytical_hierarhy_measures(
socio_all[[i]])$local$betweenness_centrality$score)
s[,10]=as.numeric(calculate_analytical_hierarhy_measures(
socio_all[[i]])$local$eigenvector_centrality$score)
save_L[[i]]=s
}
i=1
s=matrix(nrow=dim(socio_all[[i]]$sociomatrix)[1],ncol=10)
s=matrix(nrow=dim(socio_all[[i]])[1],ncol=10)
s[,1]=landau(socio_all[[i]])$local
s[,2]=kendall(socio_all[[i]])$local
s[,3]=as.numeric(m_degree(socio_all[[i]])$local)
s[,4]=as.numeric(m_close(socio_all[[i]])$local)
s[,5]=as.numeric(GRC(socio_all[[i]])$local)
s[,6]=as.numeric(D_root(socio_all[[i]])$local)
s[,7]=as.numeric(calculate_analytical_hierarhy_measures(
socio_all[[i]])$local$degree_centrality$score)
s[,8]=as.numeric(calculate_analytical_hierarhy_measures(
socio_all[[i]])$local$closeness_centrality$score)
s[,9]=as.numeric(calculate_analytical_hierarhy_measures(
socio_all[[i]])$local$betweenness_centrality$score)
s[,10]=as.numeric(calculate_analytical_hierarhy_measures(
socio_all[[i]])$local$eigenvector_centrality$score)
save_L[[i]]=s
for (i in 1:D){
s=matrix(nrow=dim(socio_all[[i]])[1],ncol=10)
s[,1]=landau(socio_all[[i]])$local
s[,2]=kendall(socio_all[[i]])$local
s[,3]=as.numeric(m_degree(socio_all[[i]])$local)
s[,4]=as.numeric(m_close(socio_all[[i]])$local)
s[,5]=as.numeric(GRC(socio_all[[i]])$local)
s[,6]=as.numeric(D_root(socio_all[[i]])$local)
s[,7]=as.numeric(calculate_analytical_hierarhy_measures(
socio_all[[i]])$local$degree_centrality$score)
s[,8]=as.numeric(calculate_analytical_hierarhy_measures(
socio_all[[i]])$local$closeness_centrality$score)
s[,9]=as.numeric(calculate_analytical_hierarhy_measures(
socio_all[[i]])$local$betweenness_centrality$score)
s[,10]=as.numeric(calculate_analytical_hierarhy_measures(
socio_all[[i]])$local$eigenvector_centrality$score)
save_L[[i]]=s
}
colnames(save_G)=c("landau","kendall","m_degree","m_close","GRC","D_root","degree",
"closeness","betweenness","eigenvector")
pairs(save_G[,-c(3,4,6)])
pairs(save_L[[6]][,-c(1,2)],cex.labels=2,labels=c("landau","kendall",
"m_degree","m_close","GRC","D_root","degree","closeness","betweenness",
"eigenvector"))
Network_Data[[1]]
Network_Data[[i]][2]
Network_Data[[1]][1]
Network_Data[[1]][2]
Network_Data[[1]][3]
Network_Data[[1]][4]
Network_Data[[1]][2:4]
unlist(Network_Data[[1]][2:4])
as.numeric(unlist(Network_Data[[1]][2:4]))
as.character(unlist(Network_Data[[1]][2:4]))
info_all=matrix(nrow=D,ncol=3)
colnames(weights)=c("is.directed","is.weighted","type")
colnames(info_all)=c("is.directed","is.weighted","type")
for(i in 1:d1){info_all[i,]=info_all[i,]=as.character(unlist(Network_Data[[1]][2:4]))}
i
i=1
Influence_Network_Data_97_108[[i-d1]][2:4]
Influence_Network_Data_97_108[[i-d1]][1]
i=30
Influence_Network_Data_97_108[[i-d1]][1]
Influence_Network_Data_97_108[[i-d1]][2]
Influence_Network_Data_97_108[[i-d1]][3]
Influence_Network_Data_97_108[[i-d1]][4]
Influence_Network_Data_97_108[[i-d1]][5]
info_all=matrix(nrow=D,ncol=3)
colnames(info_all)=c("is.directed","is.weighted","type")
for(i in 1:d1){info_all[i,]=info_all[i,]=as.character(unlist(Network_Data[[i]][2:4]))}
for(i in (d1+1):(d1+d2)){info_all[i,]=c("NA","NA","NA")}
for(i in (d1+d2+1):D){info_all[i,]=as.character(unlist(Manager_Email_Networks[[i-(d1+d2)]][2:4]))}
i=d1+d2+1
Manager_Email_Networks[[i-(d1+d2)]]
info_all=matrix(nrow=D,ncol=3)
colnames(info_all)=c("is.directed","is.weighted","type")
for(i in 1:d1){info_all[i,]=info_all[i,]=as.character(unlist(Network_Data[[i]][2:4]))}
for(i in (d1+1):(d1+d2)){info_all[i,]=c("NA","NA","NA")}
for(i in (d1+d2+1):D){info_all[i,]=c("directed","unweighted","communication")}
info_all
info_all=matrix(nrow=D,ncol=3)
colnames(info_all)=c("is.directed","is.weighted","type")
for(i in 1:d1){info_all[i,]=info_all[i,]=as.character(unlist(Network_Data[[i]][2:4]))}
for(i in (d1+1):(d1+d2)){info_all[i,]=c("NA","NA","NA")}
for(i in (d1+d2+1):D){info_all[i,]=c("directed","FALSE","communication")}
58/2
View(score_leadership_rank)
score_leadership_rank(Network_Data)
Network_Data[[1]]
Network_Data[[20]]
#load in functions
source("./Scripts/calculate_analytical_hierarchy_measures.R")
source("./Scripts/score_leadership_rank.R")
source("./Scripts/multi_plot.R")
#load data
load("./Data/Network_Data.Rdata")
load("./Data/Influence_Network_Data_97_108.Rdata")
load("./Data/Manager_Email_Networks.Rdata")
#creating list with only sociomatricies
d1=length(Network_Data);d2=length(Influence_Network_Data_97_108);d3=length(Manager_Email_Networks)
D=d1+d2+d3
socio_all=list()
for(i in 1:d1){socio_all[[i]]=Network_Data[[i]]$sociomatrix}
for(i in (d1+1):(d1+d2)){socio_all[[i]]=Influence_Network_Data_97_108[[i-d1]]$network}
for(i in (d1+d2+1):D){socio_all[[i]]=Manager_Email_Networks[[i-(d1+d2)]]$sociomatrix}
#Calculating global measures for all data
save_G=matrix(nrow=D,ncol=10)
save_LR=list()
save_L=list()
for (i in 1:D){
save_G[i,1]=landau(socio_all[[i]])$global
save_G[i,2]=kendall(socio_all[[i]])$global
save_G[i,3]=m_degree(socio_all[[i]])$global
save_G[i,4]=m_close(socio_all[[i]])$global
save_G[i,5]=GRC(socio_all[[i]])$global
save_G[i,6]=D_root(socio_all[[i]])$global
save_G[i,7:10]=as.numeric(calculate_analytical_hierarhy_measures(
socio_all[[i]])$global)
}
colnames(save_G)=c("landau","kendall","m_degree","m_close","GRC","D_root","degree",
"closeness","betweenness","eigenvector")
pairs(save_G[,-c(3,4,6)])
#Calculating both ranls and actual scores for the all local measures
for (i in 1:D){
s=matrix(nrow=dim(socio_all[[i]])[1],ncol=10)
s[,1]=landau(socio_all[[i]])$local
s[,2]=kendall(socio_all[[i]])$local
s[,3]=rank(as.numeric(m_degree(socio_all[[i]])$local))
s[,4]=rank(as.numeric(m_close(socio_all[[i]])$local))
s[,5]=rank(as.numeric(GRC(socio_all[[i]])$local))
s[,6]=rank(as.numeric(D_root(socio_all[[i]])$local))
s[,7]=as.numeric(calculate_analytical_hierarhy_measures(
socio_all[[i]])$local$degree_centrality$rank)
s[,8]=as.numeric(calculate_analytical_hierarhy_measures(
socio_all[[i]])$local$closeness_centrality$rank)
s[,9]=as.numeric(calculate_analytical_hierarhy_measures(
socio_all[[i]])$local$betweenness_centrality$rank)
s[,10]=as.numeric(calculate_analytical_hierarhy_measures(
socio_all[[i]])$local$eigenvector_centrality$rank)
save_LR[[i]]=s
}
save_LR[[29]]
save_LR[[1]]
save_LR[[1]][,3]
score_leadership_rank(socio_all[[1]],save_LR[[1]][,3])
i=1
rank(as.numeric(m_degree(socio_all[[i]])$local))
i=1
which(Network_Data[[i]]$leader==1)
save_LR[[1]]
i=1
j=1
save_LR[[i]][,j]
which(save_LR[[i]][,j]==1)
leader==which(save_LR[[i]][,j]==1)
which(Network_Data[[i]]$leader==1)
leader=which(Network_Data[[i]]$leader==1)
leader==which(save_LR[[i]][,j]==1)
count=rep(0,29)
if (leader==which(save_LR[[i]][,j]==1)) count[1]=count[1]+1
count=rep(0,29)
for(i in 1:D){
leader=which(Network_Data[[i]]$leader==1)
for (j in 1:7){
if (leader==which(save_LR[[i]][-c(1,2,6),j]==1)) count[1]=count[1]+1
}
}
count=rep(0,29)
for(i in 1:D){
leader=which(Network_Data[[i]]$leader==1)
#for (j in 1:7){
#   if (leader==which(save_LR[[i]][-c(1,2,6),j]==1)) count[1]=count[1]+1
#}
}
count=rep(0,29)
for(i in 1:29){
leader=which(Network_Data[[i]]$leader==1)
#for (j in 1:7){
#   if (leader==which(save_LR[[i]][-c(1,2,6),j]==1)) count[1]=count[1]+1
#}
}
i=1
j=1
which(save_LR[[i]][-c(1,2,6),j]==1
which(save_LR[[i]][-c(1,2,6),j]==1,na.rm=T)
which(save_LR[[i]][-c(1,2,6),j]==1,rm.na=T)
i=1
landau(socio_all[[i]])$local
#Calculating both ranls and actual scores for the all local measures
for (i in 1:D){
s=matrix(nrow=dim(socio_all[[i]])[1],ncol=10)
s[,1]=rep(-1,dim(socio_all[[i]])[1])
s[,2]=rep(-1,dim(socio_all[[i]])[1])
s[,3]=rank(as.numeric(m_degree(socio_all[[i]])$local))
s[,4]=rank(as.numeric(m_close(socio_all[[i]])$local))
s[,5]=rank(as.numeric(GRC(socio_all[[i]])$local))
s[,6]=rep(-1,dim(socio_all[[i]])[1])
s[,7]=as.numeric(calculate_analytical_hierarhy_measures(
socio_all[[i]])$local$degree_centrality$rank)
s[,8]=as.numeric(calculate_analytical_hierarhy_measures(
socio_all[[i]])$local$closeness_centrality$rank)
s[,9]=as.numeric(calculate_analytical_hierarhy_measures(
socio_all[[i]])$local$betweenness_centrality$rank)
s[,10]=as.numeric(calculate_analytical_hierarhy_measures(
socio_all[[i]])$local$eigenvector_centrality$rank)
save_LR[[i]]=s
}
which(is.na(save_LR[[1]]))
which(is.na(save_LR[[2]]))
which(is.na(save_LR[[3]]))
which(is.na(save_LR[[4]]))
which(is.na(save_LR[[5]]))
which(is.na(save_LR[[6]]))
which(is.na(save_LR[[7]]))
which(is.na(save_LR[[8]]))
which(is.na(save_LR[[9]]))
which(is.na(save_LR[[10]]))
which(is.na(save_LR[[11]]))
which(is.na(save_LR[[12]]))
which(is.na(save_LR[[13]]))
which(is.na(save_LR[[14]]))
which(is.na(save_LR[[15]]))
which(is.na(save_LR[[16]]))
which(is.na(save_LR[[17]]))
which(is.na(save_LR[[18]]))
which(is.na(save_LR[[19]]))
which(is.na(save_LR[[20]]))
which(is.na(save_LR[[21]]))
which(is.na(save_LR[[22]]))
which(is.na(save_LR[[23]]))
which(is.na(save_LR[[2]]))
which(is.na(save_LR[[24]]))
which(is.na(save_LR[[25]]))
which(is.na(save_LR[[26]]))
which(is.na(save_LR[[27]]))
which(is.na(save_LR[[28]]))
which(is.na(save_LR[[29]]))
which(is.na(save_LR[[30]]))
count=rep(0,29)
for(i in 1:29){
leader=which(Network_Data[[i]]$leader==1)
for (j in 1:7){
if (leader==which(save_LR[[i]][-c(1,2,6),j]==1,rm.na=T)) count[1]=count[1]+1
}
}
i=1
j=1
leader=which(Network_Data[[i]]$leader==1)
leader
if (leader==which(save_LR[[i]][,j]==1)) count[1]=count[1]+1
which(save_LR[[i]][,j]==1)
j=3
(leader==which(save_LR[[i]][,j]==1))
which(save_LR[[i]][,j]==1)
i=1
j=1
leader=which(Network_Data[[i]]$leader==1)
leader
if (which(save_LR[[i]][,j]==integer(0)) log=leader+1
which(save_LR[[i]][,j]==1)
if (which(save_LR[[i]][,j]==1)==integer(0)) log=leader+1
which(save_LR[[i]][,j]==1)
